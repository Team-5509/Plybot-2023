// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import java.util.function.DoubleSupplier;

import frc.robot.RobotContainer;


//limelight
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Drivetrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class HaloDrive extends CommandBase {


    //limelight stuff
    NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
NetworkTableEntry tx = table.getEntry("tx");
NetworkTableEntry ty = table.getEntry("ty");
NetworkTableEntry ta = table.getEntry("ta");


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Drivetrain m_drivetrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public HaloDrive(Drivetrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrain = subsystem;
        addRequirements(m_drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

        SmartDashboard.putBoolean("please work", true);

        double finesse = 1;
        if (RobotContainer.getInstance().getdriverJoystick().getXButton()){finesse = .5;}
        double leftSpeed = finesse * RobotContainer.getInstance().getdriverJoystick().getRawAxis(5);
        double rightSpeed = finesse *RobotContainer.getInstance().getdriverJoystick().getRawAxis(1);
        
        
        // delinearization. change exponent to increase/ decrease power
        int exponent = 3;
        leftSpeed = Math.pow(leftSpeed, exponent);
        rightSpeed = Math.pow(rightSpeed, exponent);

        //making deadzone
        double deadband = 0.2;
        if(Math.abs(leftSpeed) < deadband)
        {
            leftSpeed = 0;
        }

        if(Math.abs(rightSpeed) < deadband)
        {
            rightSpeed = 0;
        }

        




        m_drivetrain.driveTank(leftSpeed, rightSpeed);
        SmartDashboard.putNumber("leftSpeed", rightSpeed);
        SmartDashboard.putNumber("rightSpeed", leftSpeed);
        SmartDashboard.putNumber("Halo 0", RobotContainer.getInstance().getdriverJoystick().getRawAxis(0));
        SmartDashboard.putNumber("Halo 1", RobotContainer.getInstance().getdriverJoystick().getRawAxis(1));
        SmartDashboard.putNumber("Halo 2", RobotContainer.getInstance().getdriverJoystick().getRawAxis(2));
        SmartDashboard.putNumber("Halo 3", RobotContainer.getInstance().getdriverJoystick().getRawAxis(3));
        SmartDashboard.putNumber("Halo 4", RobotContainer.getInstance().getdriverJoystick().getRawAxis(4));
   
   
   
   
   
   
   
   
   
        double x = tx.getDouble(0.0);
        double y = ty.getDouble(0.0);
        double area = ta.getDouble(0.0);

        SmartDashboard.putNumber("LimelightX", x);
SmartDashboard.putNumber("LimelightY", y);
SmartDashboard.putNumber("LimelightArea", area);

boolean inPlaceForLowScore = false;
boolean inPlaceForHighScore = false;

final double highPoleDegrees = 18.9;
final double lowPoleDegrees = -2.9;


double allowance = 2;

double highPoleUpperBound = highPoleDegrees * allowance;
double highPoleLowerBound = highPoleDegrees / allowance;

double lowPoleUpperBound = lowPoleDegrees * allowance;
double lowPoleLowerBound = lowPoleDegrees / allowance;

if(y >= highPoleLowerBound && y <= highPoleUpperBound)
{
    inPlaceForHighScore = true;
}

if(y>= lowPoleLowerBound && y <= lowPoleUpperBound)
{
    inPlaceForLowScore = true;
}

SmartDashboard.putBoolean("low score", inPlaceForLowScore);
SmartDashboard.putBoolean("high score", inPlaceForHighScore);
   
   
   
   
   
   
   
   
   
   
   
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
